import * as tf from '@tensorflow/tfjs';
import * as tfvis from '@tensorflow/tfjs-vis';

import {AppHeader, AppPage} from 'components';

import {Car} from 'src/business-logic/tfjs/tfjs-car';
import React from 'react';
import {Tensor} from '@tensorflow/tfjs';
import {Typography} from '@material-ui/core';
import {getData} from 'src/business-logic/tfjs/fetch-car-data';

/**
 * A demonstration where the user can vs. an AI in a game of rock paper scissors.
 */
export function MachineLearnMicroserviceA() {
  // async function example() {
  //   // A sequential model is a container which you can add layers to.
  //   const model = tf.sequential();

  //   // Add a dense layer with 1 output unit.
  //   model.add(tf.layers.dense({units: 1, inputShape: [1]}));

  //   // Specify the loss type and optimizer for training.
  //   model.compile({loss: 'meanSquaredError', optimizer: 'SGD'});

  //   // Generate some synthetic data for training.
  //   const xs = tf.tensor2d([[1], [2], [3], [4]], [4, 1]);
  //   const ys = tf.tensor2d([[1], [3], [5], [7]], [4, 1]);

  //   // Train the model.
  //   await model.fit(xs, ys, {epochs: 500});

  //   // Ater the training, perform inference.
  //   const output: Tensor = model.predict(tf.tensor2d([[5]], [1, 1])) as Tensor;
  //   output.print();
  // }

  const [data, setData] = React.useState<Car[]>();

  function createModel() {
    // Create a sequential model
    const model = tf.sequential();

    // Add a single input layer
    model.add(tf.layers.dense({inputShape: [1], units: 1, useBias: true}));

    // Add an output layer
    model.add(tf.layers.dense({units: 1, useBias: true}));

    return model;
  }

  /**
   * Convert the input data to tensors that we can use for machine
   * learning. We will also do the important best practices of _shuffling_
   * the data and _normalizing_ the data
   * MPG on the y-axis.
   */
  function convertToTensor(data: Car[]) {
    // Wrapping these calculations in a tidy will dispose any
    // intermediate tensors.

    return tf.tidy(() => {
      // Step 1. Shuffle the data
      tf.util.shuffle(data);

      // Step 2. Convert data to Tensor
      const inputs = data.map(d => d.Horsepower);
      const labels = data.map(d => d.Miles_per_Gallon);

      const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);
      const labelTensor = tf.tensor2d(labels, [labels.length, 1]);

      //Step 3. Normalize the data to the range 0 - 1 using min-max scaling
      const inputMax = inputTensor.max();
      const inputMin = inputTensor.min();
      const labelMax = labelTensor.max();
      const labelMin = labelTensor.min();

      const normalizedInputs = inputTensor
        .sub(inputMin)
        .div(inputMax.sub(inputMin));
      const normalizedLabels = labelTensor
        .sub(labelMin)
        .div(labelMax.sub(labelMin));

      return {
        inputs: normalizedInputs,
        labels: normalizedLabels,
        // Return the min/max bounds so we can use them later.
        inputMax,
        inputMin,
        labelMax,
        labelMin,
      };
    });
  }

  async function trainModel(model, inputs, labels) {
    // Prepare the model for training.
    model.compile({
      optimizer: tf.train.adam(),
      loss: tf.losses.meanSquaredError,
      metrics: ['mse'],
    });

    const batchSize = 32;
    const epochs = 50;

    return await model.fit(inputs, labels, {
      batchSize,
      epochs,
      shuffle: true,
      callbacks: tfvis.show.fitCallbacks(
        {name: 'Training Performance'},
        ['loss', 'mse'],
        {height: 200, callbacks: ['onEpochEnd']}
      ),
    });
  }

  function testModel(model, inputData, normalizationData) {
    const {inputMax, inputMin, labelMin, labelMax} = normalizationData;

    // Generate predictions for a uniform range of numbers between 0 and 1;
    // We un-normalize the data by doing the inverse of the min-max scaling
    // that we did earlier.
    const [xs, preds] = tf.tidy(() => {
      const xs = tf.linspace(0, 1, 100);
      const preds = model.predict(xs.reshape([100, 1]));

      const unNormXs = xs.mul(inputMax.sub(inputMin)).add(inputMin);

      const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);

      // Un-normalize the data
      return [unNormXs.dataSync(), unNormPreds.dataSync()];
    });

    const predictedPoints = Array.from(xs).map((val, i) => {
      return {x: val, y: preds[i]};
    });

    const originalPoints = inputData.map(d => ({
      x: d.horsepower,
      y: d.mpg,
    }));

    tfvis.render.scatterplot(
      {name: 'Model Predictions vs Original Data'},
      {
        values: [originalPoints, predictedPoints],
        series: ['original', 'predicted'],
      },
      {
        xLabel: 'Horsepower',
        yLabel: 'MPG',
        height: 300,
      }
    );
  }

  React.useEffect(() => {
    getData().then(_data => {
      setData(_data);
      console.log(_data);
    });
  }, []);

  async function setUp() {
    if (data) {
      const values = data.map(d => ({
        x: d.Horsepower,
        y: d.Miles_per_Gallon,
      }));

      tfvis.render.scatterplot(
        {name: 'Horsepower v MPG'},
        {values},
        {
          xLabel: 'Horsepower',
          yLabel: 'MPG',
          height: 300,
        }
      );

      const model = createModel();
      tfvis.show.modelSummary({name: 'Model Summary'}, model);

      // Convert the data to a form we can use for training.
      const tensorData = convertToTensor(data);
      const {inputs, labels} = tensorData;

      // Train the model
      await trainModel(model, inputs, labels);
      console.log('Done Training');

      // Make some predictions using the model and compare them to the
      // original data
      testModel(model, data, tensorData);
    }
  }

  setUp();

  return (
    <>
      <AppHeader />
      <AppPage>
        <Typography>To use this service please kill the robot.</Typography>
      </AppPage>
    </>
  );
}

export default MachineLearnMicroserviceA;
